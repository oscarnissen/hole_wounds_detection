import math

import numpy as np
import os
from utils import parse_args
import cv2
import sys

sys.path.append("yolov7")  # for object detection
sys.path.append("deep_sort")  # for object tracking
# sys.path.append("stereo_camera_manager")  # for distance calculation
######## Object detection with Yolov7
from yolov7.models.experimental import attempt_load
######## Distance calculation including stereo camera calibration
from stereo_camera_manager.utils.triangulation import Triangulation
from stereo_camera_manager.utils.calibration import Calibration

######## DeepSORT -> Importing DeepSORT
from tools import generate_detections as gdet
from deep_sort.nn_matching import NearestNeighborDistanceMetric
from deep_sort.detection import Detection
from deep_sort.tracker import Tracker


# Downsamples image x number (reduce_factor) of times.
def downsample_image(image, reduce_factor):
    for i in range(0, reduce_factor):
        # Check if image is color or grayscale
        if len(image.shape) > 2:
            row, col = image.shape[:2]
        else:
            row, col = image.shape

        image = cv2.pyrDown(image, dstsize=(col // 2, row // 2))
    return image


def add_leading_zeros(i):
    if i > 1000000:
        return str(i)
    if i > 100000:
        return str(i).zfill(1)
    if i > 10000:
        return str(i).zfill(2)
    if i > 1000:
        return str(i).zfill(3)
    if i > 100:
        return str(i).zfill(4)
    if i > 10:
        return str(i).zfill(5)
    else:
        return str(i).zfill(6)


# python main.py -i "094759 Scw M12 - Moving No 2 To No3.m4v" -o "images" > log2.out
def main(input_file, out_directory):
    print(input_file)

    ############# LOAD VIDEO CAPTURED
    cap = cv2.VideoCapture(input_file)
    print("cv2.CAP_PROP_FRAME_WIDTH: ", cap.get(cv2.CAP_PROP_FRAME_WIDTH),
          " cv2.CAP_PROP_FRAME_HEIGHT: ", cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    frameSize = (int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)),
                 int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))
    ret, frame = cap.read()
    w = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH) / 2 - 1)
    imgL = frame[:, :w + 1]
    imgR = frame[:, w + 1:]
    num = 0
    # while(cap.isOpened() & num < 650):
    while (cap.isOpened()):
        # if num > 650: break
        num += 1
        # cap.set(cv2.CAP_PROP_POS_FRAMES, num)
        ret, frame = cap.read()
        # cv2.imwrite('images/stereoLeft/imageL' + str(num) + '.png', gray)
        w = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH) / 2 - 1)
        # print("width: ", cap.get(cv2.CAP_PROP_FRAME_WIDTH),
        #      " height: ", cap.get(cv2.CAP_PROP_FRAME_HEIGHT),
        #      " FPS: ", cap.get(cv2.CAP_PROP_FPS),
        #      " COUNT: ", cap.get(cv2.CAP_PROP_FRAME_COUNT),
        #      " w: ", w,
        #      "num: ", num)
        if frame is None:
            break
        else:
            imgL = frame[:, :w + 1]
            imgR = frame[:, w + 1:]

            input_file_name = os.path.splitext(input_file)[0]
            filenameL = out_directory + "/stereoLeft/" + input_file_name + "L_" + add_leading_zeros(num) + ".jpg"
            filenameR = out_directory + "/stereoRight/" + input_file_name + "R_" + add_leading_zeros(num) + ".jpg"
            cv2.imwrite(filenameL, imgL)
            cv2.imwrite(filenameR, imgR)
            print("Saving files! ", filenameL, " ", filenameR)
            # cv2.imshow('frame: ' + str(num),
            #               np.concatenate((image_left, image_right), axis=1)
            #               )
            # cv2.waitKey(0)

        ## continue as long as there are frames in the video or quit
        # if cv2.waitKey(1) & 0xFF == ord('q') & num > 650:
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    cap.release()
    cv2.destroyAllWindows()


def match_stereo_detection(predL_l, predR_l):
    predL_lst = []
    predR_lst = []

    for l, r in [(l, r) for l in sorted(predL_l) for r in sorted(predR_l)]:
        # print(l, r)
        if (abs(l[1][0] - r[1][0]) < 50) and (abs(l[1][1] - r[1][1]) < 50) and \
                (abs(l[1][2] - r[1][2]) < 50) and (abs(l[1][3] - r[1][3]) < 50):
            conf = (l[2] + r[2]) / 2
            l.append(conf)
            r.append(conf)

            predL_lst.append(l)
            predR_lst.append(r)
        print(l, r)

    return predL_lst, predR_lst


def calculate_speed(frame_idx, track_fish_list, track_fish_speed):
    track_fish_list_new = []
    print("frame_idx: ", frame_idx)
    print("track_fish_list: ", track_fish_list)
    print("track_fish_speed: ", track_fish_speed)
    for track in track_fish_list:
        # find the track id that corresponds to the track_id
        print("track: ", track)
        #  [62,
        #  844.2738216405669,
        #  1017.3864905271812,
        #  1126.046613236923,
        #  1142.517079421179,
        #  157.0517321438367,
        #  0.9104070663452148]
        [id, x2, y2, w2, h2, z2, c2] = track
        print("id ", id, " x2 ", x2, " y2 ", y2, " w2 ", w2, " h2 ", h2, " z2 ", z2, " c2 ", c2)

        obj = None
        if len(track_fish_speed) > 0:
            print("len(track_fish_speed) ", len(track_fish_speed))
            obj = next((obj for obj in track_fish_speed if obj[0] == id), None)

        if not (obj is None):
            print("obj: ", obj)
            [_, f, x1, y1, w1, h1, z1, _, _, _, _, _, _, _, p1] = obj
            # if id == track_id:
            # if any match
            # calculate the displacement and speed
            dx = x2 - x1
            dy = y2 - y1
            dw = w2 - w1
            dh = h2 - h1
            dz = z2 - z1
            speed = (math.sqrt(dx * dx + dy * dy + dz * dz)) * (25 / (frame_idx - f))
            p2 = [x1, y1, w1, h1, z1]
            print("p1: ", p1, " p2:", p2)
            if p1 is None:
                p1 = p2
            else:
                p1.append(p2)
            new_track = [id, frame_idx, x2, y2, w2, h2, z2, c2, dx, dy, dw, dh, dz, speed, p1]

        else:
            new_track = [id, frame_idx, x2, y2, w2, h2, z2, c2, 0, 0, 0, 0, 0, 0, []]
        if not new_track == []:
            print("new_track: ", new_track)
            track_fish_list_new.append(new_track)

    print("track_fish_list_new: ", track_fish_list_new)
    return track_fish_list_new


if __name__ == "__main__":
    track_fish_speed = []
    track_fish_list = []
    frame_idx = 1
    track_fish_list_new = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    print("main track_fish_list_new: ", track_fish_list_new)
    if len(track_fish_list_new) > 0:
        track_fish_speed.append(track_fish_list_new)
    track_fish_list = [
        [62, 844.2738216405669, 1017.3864905271812, 1126.046613236923, 1142.517079421179, 157.0517321438367,
         0.9104070663452148],
        [76, 422.2174709941919, 540.6659918685295, 465.4427188364271, 592.3059189953344, 207.27707360927357,
         0.7603769898414612],
        [80, 1409.0462188598515, 599.4221387046281, 1529.6398480801008, 722.2543259364386, 189.6720600670615,
         0.8910072445869446],
        [83, 1038.6432539609236, 791.2098398169938, 1223.3323645409519, 894.229401757972, 208.99582127603833,
         0.8696812391281128],
        [84, 574.5686617266134, 479.3085626639295, 724.6207929152768, 545.3713742965604, 275.9001150883587,
         0.8571956157684326],
        [103, 278.8104662029264, 812.4014690386344, 404.22777292504225, 892.4471092763221, 288.88294547251775,
         0.26594066619873047],
        [104, 1594.2083305008578, 355.43205511989584, 1718.825455331571, 428.48759958867356, 3083.7755997366235,
         0.6898755431175232]]
    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #print("main track_fish_list_new: ", track_fish_list_new)
    #if len(track_fish_list_new) > 0:
    #    track_fish_speed.append(track_fish_list_new)

    track_fish_list = [
        [62, 829.323464665456, 1017.3143939431836, 1110.0960980430064, 1142.3399733423594, 155.6561452116596,
         0.9059469103813171],
        [76, 420.91851471865135, 539.1958084990088, 464.4530204473671, 590.7628996658124, 209.66923839274767,
         0.7459829449653625],
        [80, 1416.1976106760687, 598.1209464995525, 1543.0247317513488, 725.0719234709798, 186.1069408559324,
         0.8997324705123901],
        [83, 1054.0499886729717, 787.3592188922348, 1231.214713430095, 886.4483107276499, 205.26912487936914,
         0.8506137132644653],
        [84, 585.9882282902024, 481.12403737932095, 733.1924534909858, 544.6733319339398, 274.35940690886304,
         0.8536198735237122],
        [103, 288.69392432976565, 805.5330445625503, 413.6372952370601, 886.1349806261227, 354.04434246018775,
         0.309601366519928],
        [104, 1602.6869637579014, 353.7272203974282, 1726.6125045995486, 425.9265796520013, 2884.6971522501563,
         0.8318090438842773]]
    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #track_fish_speed.append(track_fish_list_new)
    #print("main track_fish_list_new: ", track_fish_list_new)
    #if len(track_fish_list_new) > 0:
    #    track_fish_speed.append(track_fish_list_new)

    track_fish_list = [
        [62, 811.7137739378547, 1015.5672813820381, 1094.994028968268, 1142.5905670905852, 155.3287217795787,
         0.8722805976867676],
        [76, 419.44576864110496, 538.0248515233478, 464.52612848971313, 590.8853554596536, 207.9861290349441,
         0.7464908361434937],
        [80, 1423.7590077763464, 600.2091125445944, 1555.0511454173059, 727.6622876423805, 182.88090731815484,
         0.8999350666999817],
        [83, 1066.2614179353575, 783.7083401983375, 1240.5929799777703, 881.6321669675707, 207.85281849916458,
         0.8805606365203857],
        [84, 594.4658114384788, 481.41630389984704, 743.1644866196029, 544.3749806949436, 269.25657602481743,
         0.8634588718414307],
        [103, 296.98961042103394, 801.3456718841458, 421.71615727707683, 881.8077530820827, 354.04484587193525,
         0.309601366519928],
        [104, 1612.0715432539687, 352.1881300396216, 1735.237446365167, 423.56349632397445, 2691.163059809016,
         0.7572758793830872]]

    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #track_fish_speed.append(track_fish_list_new)
    #track_fish_speed.append(track_fish_list_new)

    track_fish_list = [
        [62, 792.4474716759456, 1014.2154645464174, 1078.3236202485994, 1143.9918467471873, 156.70542863130225,
         0.9149377942085266],
        [76, 418.4223578691627, 537.2913380849828, 464.13838224363593, 590.3061652041371, 210.31089035791288,
         0.7370283603668213],
        [80, 1429.8679095057305, 604.1574372563296, 1565.2757300609287, 730.4675231444601, 180.4793677996606,
         0.8932486772537231],
        [83, 1080.072606366318, 781.1452855608575, 1249.6897487204824, 876.6509012508163, 210.19077200851274,
         0.8957192897796631],
        [84, 600.715786500805, 480.8135313098784, 753.4110793683475, 544.2511880598154, 266.974190698982,
         0.8758661150932312],
        [104, 1622.5159659433793, 348.4040339501488, 1749.1008504465938, 421.68366395730925, 2358.3205115323235,
         0.6704636812210083]]
    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #track_fish_speed.append(track_fish_list_new)
    #track_fish_speed.append(track_fish_list_new)

    track_fish_list = [
        [62, 776.9317413550988, 1014.001654016938, 1059.0324562633532, 1143.84823343998, 155.34274768080678,
         0.9089059829711914],
        [76, 417.1256276290907, 537.0563310330655, 463.05377595246625, 589.4656918108514, 211.30829007522837,
         0.749076247215271],
        [80, 1435.884122307825, 610.1563271228433, 1574.9872122206393, 733.0316360642611, 178.30624373215,
         0.8999412655830383],
        [83, 1091.0301047054834, 776.9774626764848, 1257.783077736126, 870.9282030540832, 214.90900227024318,
         0.875162661075592],
        [84, 606.7427734257824, 480.5581034652738, 764.8396576668424, 545.1913059953871, 266.2824928992892,
         0.8633001446723938],
        [104, 1632.791512347126, 345.73219898181935, 1761.0442718324034, 420.0171127681627, 2135.6537346542955,
         0.4905298054218292]]
    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #track_fish_speed.append(track_fish_list_new)
    #track_fish_speed.append(track_fish_list_new)

    track_fish_list = [
        [62, 763.4779956714833, 1012.5678789143404, 1043.340834087668, 1143.4411020138457, 154.5618116729103,
         0.9012349843978882],
        [76, 416.0001323967969, 536.0207509737312, 461.7455825057304, 587.5302989523713, 209.46922500654532,
         0.7611024379730225],
        [80, 1441.5275682252884, 617.2811852274227, 1583.8369157985844, 734.8358316063624, 176.89582428395084,
         0.901306688785553],
        [83, 1100.043328440527, 774.226708741892, 1262.3542074522047, 865.2818088489493, 220.7238058057215,
         0.8684390783309937],
        [84, 613.1984561953901, 479.77482387299744, 776.1937273284209, 545.5305992953399, 264.2829658435513,
         0.866344690322876],
        [104, 1638.3735793774304, 343.8044080133214, 1767.591268752809, 418.09769762241933, 1985.9348675650344,
         0.667261004447937]]
    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #track_fish_speed.append(track_fish_list_new)
    #track_fish_speed.append(track_fish_list_new)

    track_fish_list = [
        [62, 755.4111217736055, 1011.6771457229205, 1028.1286991440238, 1140.9675652545704, 155.41251924795077,
         0.862141489982605],
        [76, 413.8214811436422, 535.3394827862911, 459.47290482412853, 586.5063964747003, 207.80507693333072,
         0.6766147017478943],
        [80, 1446.9127523786374, 624.1512354095114, 1594.8447771283465, 738.043126434922, 175.61955300178607,
         0.9037845134735107],
        [83, 1103.743394469562, 772.3470145920817, 1271.1854859157806, 866.4190568610634, 219.73056800693874,
         0.8611997961997986],
        [84, 621.3539273391019, 479.7823976233334, 787.6259139276656, 545.9735334431117, 265.39258242688004,
         0.8595424294471741],
        [104, 1640.2519244894936, 341.8443722061487, 1772.867026081081, 417.3851821782631, 1830.7433508819847,
         0.4807141423225403]]
    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #track_fish_speed.append(track_fish_list_new)
    #track_fish_speed.append(track_fish_list_new)

    track_fish_list = [
        [62, 751.8507684386718, 1010.6574019549812, 1013.3168517990639, 1136.0331035256258, 157.42821862364048,
         0.8819316029548645],
        [76, 411.44269756604547, 534.7898783838699, 456.9799820268176, 585.8297187405279, 207.1300136195,
         0.6822111010551453],
        [80, 1451.2348048988133, 628.1761585133219, 1609.6736289167873, 742.4600034032194, 175.71016467400253,
         0.8967003226280212],
        [83, 1108.0484493292552, 771.4041754568258, 1278.9254935477811, 867.5676016220659, 218.8317987619555,
         0.8576076626777649],
        [84, 632.1514012649935, 481.7407482925711, 798.7415304223618, 547.1150637552089, 264.8513136604883,
         0.8812325596809387],
        [104, 1637.6398656093359, 340.192361365166, 1775.8827915369427, 417.4669891811171, 1718.1849771408295,
         0.6449337601661682]]
    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #track_fish_speed.append(track_fish_list_new)

    track_fish_list = [
        [62, 751.1493430898299, 1010.5958193245903, 1001.5545607526147, 1131.1600915784418, 156.4488899863773,
         0.8915494084358215],
        [76, 409.2363371308038, 533.9569508964732, 454.49414649517695, 584.9510632550011, 206.51915685109597,
         0.7160309553146362],
        [80, 1454.619257807428, 631.504717467988, 1622.0628331639098, 743.956379630419, 175.14545507938112,
         0.9003917574882507],
        [83, 1117.183248860351, 770.5022812858813, 1283.2019887955848, 863.5290537503591, 219.01933021800528,
         0.851652204990387],
        [84, 641.9901935942452, 481.79982218841434, 812.0459499404086, 547.8632423579688, 264.3615263056377,
         0.8835058808326721],
        [104, 1636.704824113007, 338.65743710523134, 1785.0088978074814, 420.76462641071726, 1592.9557584091428,
         0.7594233751296997]]
    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #track_fish_speed.append(track_fish_list_new)

    track_fish_list = [
        [62, 749.4727051037695, 1009.8919066229345, 994.3102901289606, 1128.0296507471087, 159.06688224327732,
         0.9014120101928711],
        [76, 408.2446259578862, 534.6725610765561, 451.860882687486, 583.6644170886225, 207.87728313257907,
         0.7578228712081909],
        [80, 1454.8276558700802, 631.878183301447, 1638.0537351998844, 747.7196578460283, 173.4796136720218,
         0.8946399688720703],
        [83, 1126.7665233208074, 769.6422993763123, 1291.189360591472, 861.4703162164419, 220.29520093711483,
         0.867519736289978],
        [84, 651.8475568236364, 482.1314582599132, 825.3850946458102, 549.1149995469821, 262.54465374383295,
         0.8789379000663757],
        [104, 1639.1937926626767, 336.5208197721664, 1794.3647554167958, 421.72812288634503, 1468.0840436128758,
         0.720025360584259]]
    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #track_fish_speed.append(track_fish_list_new)

    track_fish_list = [
        [62, 742.7588452433971, 1008.9591029307519, 990.1986339797294, 1128.6133441474524, 160.73502889817289,
         0.8958892822265625],
        [76, 406.57569222131434, 534.9922490263847, 450.31449730844065, 584.2360261549388, 209.10623530874176,
         0.7459329962730408],
        [80, 1456.1866470290852, 631.5829392344716, 1658.683548757194, 753.6328581106682, 173.77378367850136,
         0.8849478363990784],
        [83, 1136.835898456096, 768.4161230114875, 1299.3150934138723, 858.8204123304838, 217.60211547063395,
         0.8601980805397034],
        [84, 661.9800523530173, 482.2366746743931, 837.4840535008383, 549.5700515576702, 262.27427084331833,
         0.8793071508407593],
        [104, 1643.219866603895, 332.2348625859012, 1806.4951485582362, 421.4879958046108, 1354.3660859548147,
         0.7589232325553894]]
    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #track_fish_speed.append(track_fish_list_new)

    track_fish_list = [[62, 739.0897779473969, 1010.94722915856, 983.2201998999088, 1128.860599455, 167.55620749909525,
                        0.8957103490829468],
                       [76, 406.5314626836895, 537.4539212380536, 448.95429655256964, 585.1346613266776,
                        208.3073800735421, 0.7668123841285706],
                       [80, 1461.199201122143, 632.6762842073291, 1679.3675030428847, 758.3705350037353,
                        171.72069014817944, 0.8237622976303101],
                       [83, 1146.0904193929287, 765.0450196572268, 1311.166466233396, 856.9550100696578,
                        215.16517436236168, 0.8383730053901672],
                       [84, 671.5512123333358, 481.5975641637365, 849.7759214807097, 549.7206510024976,
                        262.02960491219886, 0.8808324933052063],
                       [104, 1647.42760435144, 332.1994559679767, 1814.6977349569054, 423.3080045413701,
                        1248.366437993735, 0.6386256217956543]]
    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #track_fish_speed.append(track_fish_list_new)

    track_fish_list = [
        [62, 729.8963723024291, 1010.3618905949268, 977.6104240149581, 1130.0058296751602, 166.09679869815014,
         0.8765174746513367],
        [76, 406.4186929496691, 538.0779232025753, 449.0467977241689, 585.8522144190745, 205.2913787033901,
         0.7598332166671753],
        [80, 1466.9924542490642, 634.2742077677855, 1699.1371619416625, 762.9990481657474, 169.37968290432303,
         0.9038701057434082],
        [83, 1160.1850417850185, 763.2117571303952, 1321.1837045394107, 852.7158310493537, 216.80769332783723,
         0.8613548874855042],
        [84, 681.4472019445491, 481.9946481538914, 860.2694595421906, 550.086040337201, 259.2053938565015,
         0.8871086835861206],
        [104, 1658.9620191288639, 332.91580425441725, 1822.4132405897003, 421.16318766690785, 1162.0952637529076,
         0.7623053193092346]]
    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #track_fish_speed.append(track_fish_list_new)

    track_fish_list = [
        [62, 718.6863056692341, 1011.467752603657, 964.399534948531, 1129.7894004662567, 169.39001805367081,
         0.8938714265823364],
        [76, 406.54659420902044, 538.9789078922533, 449.0078114608017, 586.1317812281717, 204.02453210825016,
         0.7906278967857361],
        [80, 1474.08060313223, 635.4327520607986, 1719.1252029650207, 766.9276713964676, 168.8182908348536,
         0.9014302492141724],
        [83, 1170.5252160338534, 759.6193558225995, 1334.1898922784867, 851.2471232798556, 219.52311923131398,
         0.8567960262298584],
        [84, 690.8365058752282, 481.47237536054456, 872.680549360263, 550.5335364089543, 259.25263998836095,
         0.8813130259513855],
        [104, 1668.7392363507497, 333.3116131394829, 1829.8649737140076, 419.33147922056776, 1075.6783583811764,
         0.7483920454978943]]
    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #track_fish_speed.append(track_fish_list_new)

    track_fish_list = [
        [62, 705.3724031194189, 1011.8833787221649, 953.2994672519804, 1131.7365430409411, 171.53894320504477,
         0.905037522315979],
        [76, 404.7458815590911, 538.9873039837403, 447.61664099808627, 586.2560226692437, 205.62001021546544,
         0.8120778799057007],
        [80, 1483.1404997878672, 636.4291783521016, 1737.689229255552, 769.2849593079793, 167.7542330549242,
         0.8394262194633484],
        [83, 1182.5815691186556, 757.7072555515683, 1343.711303490583, 848.1447663382662, 223.35402341848797,
         0.883314847946167],
        [84, 701.6571929965263, 482.5736773275799, 880.5753843190407, 550.0307061843556, 256.6925275959833,
         0.872887909412384],
        [104, 1678.9021391807996, 328.26748535495204, 1843.5716293226158, 415.35431172145735, 999.5095027096477,
         0.6073328852653503]]
    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #track_fish_speed.append(track_fish_list_new)

    track_fish_list = [
        [62, 688.1943564672141, 1010.378496595568, 940.8842362213379, 1133.4655261190778, 171.37382650878158,
         0.9018622040748596],
        [76, 402.80017344013896, 538.990994219317, 445.80744406119004, 586.3145272628037, 205.15274799176922,
         0.7308362126350403],
        [80, 1492.5383671761433, 638.0145981381726, 1754.8211235637357, 771.6808707956193, 164.91465439239562,
         0.8862167000770569],
        [83, 1194.0334678442023, 755.4306759890496, 1351.2333234236455, 843.7656676457358, 226.82056264653122,
         0.8668351173400879],
        [84, 709.8189663240327, 481.9873380055178, 890.918069275431, 549.8125062826264, 254.37591283451303,
         0.8790645599365234],
        [104, 1689.3201188720388, 327.07640217258927, 1856.7544823110636, 414.530281838389, 930.2078055084321,
         0.6929956078529358]]
    frame_idx = frame_idx + 1
    track_fish_speed = calculate_speed(frame_idx, track_fish_list, track_fish_speed)
    #track_fish_speed.append(track_fish_list_new)

    '''
    features: [
        [tensor(0.), [tensor(402.), tensor(539.), tensor(446.), tensor(586.50000), tensor(200.70926)], tensor(0.73084),
         [402.0, 539.0, 44.0, 47.5, 200.70925903320312], 0.7308362126350403, tensor(0.73514), -1],
        [tensor(0.), [tensor(693.), tensor(1009.50000), tensor(931.), tensor(1134.50000), tensor(169.83092)],
         tensor(0.90186), [693.0, 1009.5, 238.0, 125.0, 169.83091735839844], 0.9018622040748596, tensor(0.89625), -1],
        [tensor(0.), [tensor(703.50000), tensor(481.50000), tensor(896.50000), tensor(549.50000), tensor(232.40019)],
         tensor(0.87906), [703.5, 481.5, 193.0, 68.0, 232.4001922607422], 0.8790645599365234, tensor(0.88008), -1],
        [tensor(0.), [tensor(952.), tensor(0.), tensor(1096.), tensor(58.50000), tensor(367.96698)], tensor(0.28982),
         [952.0, 0.0, 144.0, 58.5, 367.96697998046875], 0.2898247539997101, tensor(0.29536), -1],
        [tensor(0.), [tensor(1195.50000), tensor(755.50000), tensor(1349.50000), tensor(843.), tensor(259.74139)],
         tensor(0.86684), [1195.5, 755.5, 154.0, 87.5, 259.74139404296875], 0.8668351173400879, tensor(0.86563), -1],
        [tensor(0.), [tensor(1465.), tensor(637.50000), tensor(1785.50000), tensor(771.), tensor(137.98761)],
         tensor(0.88622), [1465.0, 637.5, 320.5, 133.5, 137.98760986328125], 0.8862167000770569, tensor(0.89501), -1],
        [tensor(0.), [tensor(1682.50000), tensor(327.50000), tensor(1869.), tensor(414.50000), tensor(259.74139)],
         tensor(0.69300), [1682.5, 327.5, 186.5, 87.0, 259.74139404296875], 0.6929956078529358, tensor(0.72359), -1]]
    p_el: (62 688.1943564672141 1010.378496595568 940.8842362213379 1133.4655261190778 171.37382650878158)
    xyxyL: [701.0773139085197, 1023.2614540368736, 953.7671936626435, 1146.3484835603836]
    xyxyR: [675.3113990259085, 997.4955391542624, 928.0012787800323, 1120.582568677772]
    distance
    1.71
    m
    p_el: (76 402.80017344013896 538.990994219317 445.80744406119004 586.3145272628037 205.15274799176922)
    xyxyL: [413.56191918850647, 549.7527399676845, 456.56918980955754, 597.0762730111712]
    xyxyR: [392.03842769177146, 528.2292484709495, 435.04569831282254, 575.5527815144362]
    distance
    2.05
    m
    p_el: (80 1492.5383671761433 638.0145981381726 1754.8211235637357 771.6808707956193 164.91465439239562)
    xyxyL: [1505.9259082749054, 651.4021392369345, 1768.2086646624978, 785.0684118943813]
    xyxyR: [1479.1508260773812, 624.6270570394106, 1741.4335824649736, 758.2933296968573]
    distance
    1.65
    m
    p_el: (83 1194.0334678442023 755.4306759890496 1351.2333234236455 843.7656676457358 226.82056264653122)
    xyxyL: [1203.7671608026617, 765.1643689475089, 1360.967016382105, 853.4993606041951]
    xyxyR: [1184.2997748857429, 745.6969830305903, 1341.499630465186, 834.0319746872765]
    distance
    2.27
    m
    p_el: (84 709.8189663240327 481.9873380055178 890.918069275431 549.8125062826264 254.37591283451303)
    xyxyL: [718.4982539533713, 490.66662563485653, 899.5973569047696, 558.491793911965]
    xyxyR: [701.139678694694, 473.3080503761791, 882.2387816460923, 541.1332186532877]
    distance
    2.54
    m
    p_el: (104 1689.3201188720388 327.07640217258927 1856.7544823110636 414.530281838389 930.2078055084321)
    xyxyL: [1691.6935688693322, 329.4498521698827, 1859.127932308357, 416.90373183568244]
    xyxyR: [1686.9466688747455, 324.7029521752958, 1854.3810323137702, 412.15683184109554]
    distance
    9.30
    m
    Done.(0.0
    ms) Inference, (1726.5ms)
    NMS, (400.1ms)
    tracking, 2126.6
    ms) overall
    
    '''

    '''
    predL_lst = [[0, [75, 1093, 134, 1169], 0.27469],
                 [0, [77, 595, 125, 646], 0.41307],
                 [0, [502, 672, 549, 731], 0.72769],
                 [0, [753, 613, 849, 688], 0.81732],
                 [0, [853, 445, 951, 493], 0.27551],
                 [0, [1358, 1058, 1416, 1114], 0.38262],
                 [0, [1528, 331, 1619, 423], 0.81983]]
    predR_lst = [[0, [476, 676, 522, 733], 0.73524],
                 [0, [734, 613, 831, 687], 0.82086],
                 [0, [1515, 330, 1599, 424], 0.80206],
                 [0, [1624, 1119, 1711, 1176], 0.31137]]
    predL_lst, predR_lst = match_stereo_detection(predL_lst, predR_lst)
    print(len(predL_lst), len(predR_lst))
    print("predL_lst:", predL_lst)
    print("predR_lst:", predR_lst)
    # args = parse_args()
    # E:/Calibration Videos/20220824_100141 Calibration
    # main(args.input, args.output)
    '''
